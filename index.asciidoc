= The HAL Forms Media Type
:author: Mike Amundsen
:email: mca@amundsen.com
:toc: 

== Status
Doc Status:: 
  *[white red-background]#Working Draft#* -- _Only experimental and `proof-of-concept' apps should be built on this unstable draft._
Last Updated::
  {docdate}
Proposed IANA Registrations::
  +application/prs.hal-forms+json+
Github Repo::
  https://github.com/mamund/hal-forms


== Summary
This document describes a simple media type designed to add runtime FORM support for the http://stateless.co/hal_specification.html[HAL] media type. This is an _independent backward-compatible_ extension of the HAL media type and MUST NOT be treated as standard HAL or as part of the https://tools.ietf.org/html/draft-kelly-json-hal-07[HAL specification].

== Motivation
The HAL media type is a popular format for representing API responses. One of the possible reasons for this popularity is that HAL does not include detailed information about state transitions like filtered requests (e.g. search, sort, etc.) or write operations (e.g. create, edit, delete, etc.) as part of the specification. This feature keeps the complexity of HAL responses relivately low and easy to deal with. However, this also means one of the challenges of using HAL for APIs that support dynamic user inputs and/or varying workflow patterns is client applications must encode the detailed transition information (args, methods, workflow) directly in the client code. That means clients must be updated each time the input or workflow details change. 

The HAL Forms media type is an attempt to meet this challenge by creating a format and processing pattern to support dynamic UI forms for HAL responses. This is a backward-compatible, non-standard extension. There is nothing in this format or process pattern that adds breaking changes to the HAL media type itself. Clients that implement this extension can still be valid HAL clients by degrading gracefully (e.g. not throwing errors when HAL Forms documents are not returned by the server.

== Compliance
An implementation (client or server) of this specification is not compliant if it fails to satisfy one or more of the MUST or REQUIRED elements. An implementation that satisfies all the MUST and REQUIRED elements as well as all the SHOULD and RECOMMENDED elements is said to be "unconditionally compliant"; one that satisfies all the MUST and REQUIRED elements but not all the SHOULD and RECOMMENDED elements is said to be "conditionally compliant."

[NOTE]
.RFC2119 Words
====
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", 
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be 
interpreted as described in link:http://tools.ietf.org/html/rfc2119[RFC2119].
====

== The HAL Forms Media Type
The HAL Forms media type is a simple https://tools.ietf.org/html/rfc7159[JSON] document that contains information on the HTTP method, and parameters to use when making a templated request to a HAL server. This media type can be used to return dynamic state transition descriptions at runtime for HAL servers.

=== Example HAL Forms document
Here is a simple HAL Forms document example:

.Example HAL Forms document.
----
include::hal-forms-response.json[]
----

== Properties of a HAL Forms Document
All HAL Forms documents MUST be valid https://tools.ietf.org/html/rfc7159[JSON] documents. The following is a summary of the structure of the HAL Forms media type:

+contentType+::
  The value of +contentType+ is the media type the client SHOULD use when sending a request body to the server. This is an OPTIONAL element. Valid values for +contentType+ are +application/json+ and +application/x-www-form-urlencoded+. If the +contentType+ property is missing, is set to empty, or contains an unrecognized value, the client SHOULD act is if the +contentType+ is set to +application/json+. See <<encoding-request-bodies,Encoding Request Bodies>> for details.
+method+::
  The HTTP method the client SHOULD execute when making the service request. Any valid HTTP method is allowed. This is a REQUIRED element. If the value is empty or is not understood by the client, the value MUST be treated as an HTTP GET.
+properties+::
  An array of one or more anonymous +property+ objects that each describe a parameter for a state transition. This is an OPTIONAL element. If the array is missing or empty, the +properties+ collection MUST be treated as an empty set of parameters -- meaning that the +method+ is meant to be executed without passing any parameters.
+property+::
  A JSON object that describes a state transition parameter. A +property+ object has the following elements:
  +
  * +name+ : The parameter name. This is a valid JSON string. This is a REQUIRED element. If this attribute is missing or set to empty, the client SHOULD ignore this +property+ object completely.
  * +prompt+ : The human-readable prompt for the parameter. This is a valid JSON string. This is an OPTIONAL element. If this element is missing, clients MAY act as if the +prompt+ values is set to the value in the +name+ attribute.
  * +readOnly+ : A true/false flag to indicate whether the parameter is read-only. This is an OPTIONAL element. If this element is missing, empty or set to an unregnized value, it SHOULD be treated as if the +readOnly+ value is set to `false'. 
  * +regex+ : A regular expression string to be applied to the value of the parameter. Rules for valid values are the same as the http://www.w3.org/TR/html5/forms.html#the-pattern-attribute[HTML5 pattern] attribute. This is an OPTIONAL element. If this attribute is set to empty or contains an invalid regular expression, it SHOULD be ignored.
  * +required+ : A true/false flag indicate whether the parameter is required. If this attribute is missing, set to blank or contains an unrecognized value, it SHOULD be treated as if the value of +required+ is set to `false'.
  * +templated+ : A true/false flag to indicate whether the +value+ element contains a https://tools.ietf.org/html/rfc6570[URITemplate] string for the client to resolve. This is an OPTIONAL element. If this element is missing, set to empty, or contains unrecognized content, it SHOULD be treated as if the +templated+ value is set to `false'.
  * +value+ : The paramter value. This is a valid JSON string. This string MAY contain a URITtemplate (see +templated+) for details. This is an OPTIONAL element. If it does not exist, clients SHOULD act as if the +value+ property is set to an empty string.
+self+::
  A string that represents the associated URL for this response. This is an OPTIONAL element.

[[encoding-request-bodies]]
=== Encoding Request Bodies
When clients are instructed to send a request with a body (e.g. PUT, POST, PATCH), there are two possible valid content-types: +application/json+ and +application/x_www-form-urlencoded+. Compliant client applciations MUST support sending bodies using +application/json+ and MAY support sending bodies using +application/x-www-urlencoded+. 

==== Sending +application/json+ Bodies
When sending bodies encoded as +application/json+, clients SHOULD construct a simple JSON dictionary object that contains a set of name-value pairs that match the +property+ objects in the HAL Forms document. For example, using the Example HAL Forms document above as a guide, a client would construct a JSON dictionary object that looks like the following:

----
{
  "title" : "A Sample HAL Forms Response",
  "completed" : false
}
----

==== Sending +application/x-www-form-urlencoded+ Bodies
When sending bodies encoded as +application/x-www-form-urlencoded+, clients SHOULD construct a body that is in compliance with the guidance in the http://www.w3.org/TR/html/forms.html#application/x-www-form-urlencoded-encoding-algorithm[W3C FORMS Encoding Algorithm]. A sample (using the Example HAL Forms document) follows:

----
title="A+Sample+HAL+Forms+Response"&completed="false"
----

== The HAL Forms Media Type Identifier String
The media type identifier string for HAL Forms documents is: +application/prs.hal-forms+json+  This SHOULD be used as part of the HTTP +accept+ header when clients make a request for a HAL Forms document. It SHOULD appear as the HTTP +content-type+ header when servers return a HAL Forms document. 


== Suggested Process Flow for HAL Forms
While it is completely up to authors and consumers to determine how they wish to use the HAL Forms media type, the following is a suggested process flow for runtime use of HAL Forms documents on the Web.

 . Servers emit valid HAL responses that contain +rel+ values that are valid URLs which point to HAL Forms documents.
 . Clients parse the HAL response and (either on-demand or in pre-feftch mode) pull the HAL Forms as needed.
 . When HAL Form is returned by the server, clients use this information to render an input UI for humans to deal with at the appropriate time.
 . Clients collect the completed user inputs and, based on +contentType+, craft a valid request to send to the server.

=== Starting With a Typcial HAL Response.
A client application can start with a typical HAL response and use information in the representation to see if HAL Forms documents are available. Below is a HAL response w/ URLs for +rel+ values. These MAY point to HAL Form documents.

.A Typical HAL Response with URLs for rel values
----
**** REQUEST
GET /task-list/ HTTP/1.1
Host: api.example.org
Accept: application/vnd.hal+json

**** RESPONSE
HTTP/1.1 200 OK
Content-Type: application/vnd.hal+json
Date: Wed, 01 Jun 2016 14:50:30 GMT

include::hal-response.json[]
----

=== Requesting a HAL Form Document
After accepting and parsing the HAL response, a HAL Forms-compliant client app MAY use the +rel+ URLs to make requests for HAL Forms documents. In the case of this example, the +http://api.example.org/rels/create+ is used to see if there is a HAL Form document available.

.Requesting a HAL Forms document
----
**** REQUEST
GET /rels/create HTTP/1.1
Host: api.example.org
Accept: application/prs.hal-forms+json

**** RESPONSE
HTTP/1.1 200 OK
Content-Type: application/prs.hal-forms+json
Date: Wed, 01 Jun 2016 14:59:30 GMT

include::hal-forms-response.json[]
----

=== Sending a HAL Form Body Request
After receiving the HAL Forms response and rendering the UI, the client application can -- once the user supplies inputs and executes the "submit" action -- use the instructions in the HAL Forms document to compose a request body and send it to the URL indicated in the HAL document response (as follows):

.Sending a HAL Forms body request
----
**** REQUEST
GET /task-list/ HTTP/1.1
Host: api.example.org
Accept: application/json

{
  "title" : "A Sample HAL Forms Response",
  "completed" : false
}

**** RESPONSE
HTTP/1.1 201 OK
Content-Type: application/vnd.hal+json
Date: Wed, 01 Jun 2016 15:03:30 GMT
...
----
 
== Extending the HAL Forms Document
Authors can extend the HAL Forms media type as long as the following rules are observed:

 . No existing properties or objects are removed.
 . No existing values, properties or objects are altered in a way that is non-backward compatible (e.g. changes MUST NOT break existing implementations that adhere to this specification).
 . All new properties or objets are treated as OPTIONAL (e.g. no new REQUIRED elements are introduced in an extension).
 
[WARNING]
==== 
Authors should be aware that a future version of this specification MAY add new elements and should take care that any extensions are implemented in a way that reduces the likelihood that a future version of this speficiation is in conflict with your extension.
====

== Acknowledgements
I thank the following people who offered advice, comment, and contributions to this spec: 
Pete Johanson,
Mike Kelly,
Dilip Krishnan.




 
 
